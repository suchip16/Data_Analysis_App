# -*- coding: utf-8 -*-
"""ASIC2013_Data_Analysis_App.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eszm2z4FIIRjvdrJUq3c8zPu5uuM_egI
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder

def upload_data():
  print("Upload Data:")
  file_path=input("Enter the path of the file (.csv, .xlsx, .txt) or type 'manual' to enter data manually")
  if file_path.lower()=='manual':
    tips=input("Enter data separated by commas:")
    tips==[int(x) for x in tips.split(',')]
  else:
    tips=pd.read_csv(file_path)
  return tips


def labelencoding(tips):
  label_encoder=LabelEncoder()
  columns=['sex','smoker','day', 'time']
  for col in columns:
    tips[col] = label_encoder.fit_transform(tips[col])

def tips_mean(tips):
  print("Visualizing Data..")
  mean_value=np.mean(tips['tip'])
  plt.hist(tips['tip'],bins=10)
  plt.title("Histogram of Tips")
  plt.xlabel("Value")
  plt.ylabel("Frequency")
  plt.show()
  plt.savefig("tips_mean.png")
  return mean_value

def tips_smoking(tips):
  plt.figure(figsize=(6,6))
  sns.countplot(x="smoker",data=tips,palette="Set2")
  plt.title("Total tips based on smoker")
  plt.show()
  plt.savefig("tips_smoking.png")

def tips_days(tips):
  plt.figure(figsize=(6,6))
  sns.countplot(x="day",data=tips,palette="Set2")
  plt.title("Total tips based on day")
  plt.show()
  plt.savefig("tips_days.png")

def tips_sex(tips):
  plt.figure(figsize=(6,6))
  sns.countplot(x="sex",data=tips,palette="Set2")
  plt.title("Total tips based on gender")
  plt.show()
  plt.savefig("tips_gender.png")

def tips_time(tips):
  plt.figure(figsize=(6,6))
  sns.countplot(x="time",data=tips,palette="Set2")
  plt.title("Total tips based on time")
  plt.show()
  plt.savefig("tips_time.png")

def bill(tips):
  plt.figure(figsize=(6,6))
  sns.countplot(x="sex",data=tips,palette="Set2")
  plt.title("Total bill based on gender")
  plt.show()
  plt.savefig("total_bill.png")

def correlation(tips):
  sns.heatmap(tips.corr(), annot = True)
  plt.show()
  plt.savefig("correlation.png")

def main():
    # Upload data
    tips = upload_data()

    # Analyze data
    mean_value = tips_mean(tips)
    # View results
    print("Results:")
    print("Mean value:", mean_value)

    # tips based on smoking
    tips_smoking(tips)

     # tips based on days
    tips_days(tips)

     # tips based on gender
    tips_sex(tips)

     # tips based on gender
    tips_time(tips)

     # total bill based on gender
    bill(tips)

    # label encoding
    labelencoding(tips)

    # correlation matrix
    correlation(tips)

if __name__ == "__main__":
    main()